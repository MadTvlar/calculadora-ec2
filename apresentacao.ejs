<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard de Vendas</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
  <style>
    body {
      background-color: #f5f6fa;
    }

    .dashboard-container {
      padding: 2rem 0;
    }

    .card {
      background: white;
      border-radius: 15px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
      border: none;
    }

    .card-header {
      background-color: #2c3e50;
      color: white;
      border-radius: 15px 15px 0 0 !important;
      padding: 1rem;
    }

    .table-container {
      padding: 1.5rem;
    }

    .custom-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }

    .custom-table th {
      background-color: #34495e;
      color: white;
      font-weight: 600;
      padding: 1rem;
      border-bottom: 2px solid #dee2e6;
    }

    .custom-table td {
      padding: 1rem;
      border-bottom: 1px solid #dee2e6;
      vertical-align: middle;
    }

    .custom-table tbody tr:hover {
      background-color: #f8f9fa;
    }

    .chart-container {
      height: 400px;
      padding: 1.5rem;
    }

    .quantidade {
      font-weight: 600;
      color: #007bff;
    }

    .total-row {
      background-color: #f8f9fa;
      font-weight: bold;
    }

    .subtotal-row {
      background-color: #e9ecef;
    }

    .modelo-cell {
      font-weight: 600;
      color: #2c3e50;
    }

    .filial-cell {
      padding-left: 2rem !important;
    }

    .loading {
      text-align: center;
      padding: 2rem;
      color: #6c757d;
    }

    .error-message {
      color: #dc3545;
      text-align: center;
      padding: 1rem;
    }
  </style>
</head>

<body>
  <div class="container dashboard-container">
    <h1 class="text-center mb-4">Dashboard de Vendas</h1>

    <!-- Tabela de Totais -->
    <div class="card">
      <div class="card-header">
        <h3 class="mb-0">Vendas por Modelo e Filial</h3>
      </div>
      <div class="table-container">
        <div class="table-responsive">
          <table class="custom-table">
            <thead>
              <tr>
                <th>Modelo</th>
                <th>Filial</th>
                <th>Quantidade Vendida</th>
              </tr>
            </thead>
            <tbody id="vendasTableBody">
              <tr>
                <td colspan="3" class="loading">Carregando dados...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Gráficos -->
    <div class="row">
      <div class="col-md-6">
        <div class="card">
          <div class="card-header">
            <h3 class="mb-0">Vendas por Modelo</h3>
          </div>
          <div class="chart-container">
            <div id="modeloChart" style="height: 100%;"></div>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="card">
          <div class="card-header">
            <h3 class="mb-0">Vendas por Filial</h3>
          </div>
          <div class="chart-container">
            <div id="filialChart" style="height: 100%;"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Função para formatar números
    function formatarNumero(numero) {
      return new Intl.NumberFormat('pt-BR').format(numero);
    }

    // Carregar dados da tabela
    async function carregarDadosTabela() {
      try {
        const response = await fetch('/api/vendas-totais');
        const dados = await response.json();

        // Agrupar dados por modelo
        const dadosAgrupados = {};
        dados.forEach(venda => {
          if (!dadosAgrupados[venda.modelo]) {
            dadosAgrupados[venda.modelo] = {
              filiais: {},
              totalQuantidade: 0
            };
          }

          dadosAgrupados[venda.modelo].filiais[venda.filial] = {
            quantidade: venda.quantidade
          };

          dadosAgrupados[venda.modelo].totalQuantidade += venda.quantidade;
        });

        const tbody = document.getElementById('vendasTableBody');
        let html = '';
        let totalGeralQuantidade = 0;

        // Ordenar modelos por quantidade total
        const modelosOrdenados = Object.entries(dadosAgrupados)
          .sort(([, a], [, b]) => b.totalQuantidade - a.totalQuantidade);

        modelosOrdenados.forEach(([modelo, dados]) => {
          // Linha do modelo com subtotal
          html += `
            <tr class="subtotal-row">
              <td class="modelo-cell">${modelo}</td>
              <td>Subtotal</td>
              <td class="quantidade">${formatarNumero(dados.totalQuantidade)}</td>
            </tr>
          `;

          // Linhas das filiais
          Object.entries(dados.filiais)
            .sort(([, a], [, b]) => b.quantidade - a.quantidade)
            .forEach(([filial, info]) => {
              html += `
                <tr>
                  <td></td>
                  <td class="filial-cell">${filial}</td>
                  <td class="quantidade">${formatarNumero(info.quantidade)}</td>
                </tr>
              `;
            });

          totalGeralQuantidade += dados.totalQuantidade;
        });

        // Linha do total geral
        html += `
          <tr class="total-row">
            <td colspan="2"><strong>TOTAL GERAL</strong></td>
            <td class="quantidade">${formatarNumero(totalGeralQuantidade)}</td>
          </tr>
        `;

        tbody.innerHTML = html;
      } catch (error) {
        console.error('Erro ao carregar dados da tabela:', error);
        document.getElementById('vendasTableBody').innerHTML = `
          <tr>
            <td colspan="3" class="error-message">
              Erro ao carregar dados. Por favor, tente novamente mais tarde.
            </td>
          </tr>
        `;
      }
    }

    // Carregar gráfico de modelos
    async function carregarGraficoModelos() {
      try {
        const response = await fetch('/api/vendas-modelo');
        const { modelos } = await response.json();

        const chart = echarts.init(document.getElementById('modeloChart'));
        const option = {
          tooltip: {
            trigger: 'item',
            formatter: '{b}: {c} ({d}%)'
          },
          legend: {
            orient: 'vertical',
            right: 10,
            top: 'center'
          },
          series: [{
            type: 'pie',
            radius: ['40%', '70%'],
            avoidLabelOverlap: false,
            itemStyle: {
              borderRadius: 10,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: {
              show: false,
              position: 'center'
            },
            emphasis: {
              label: {
                show: true,
                fontSize: '18',
                fontWeight: 'bold'
              }
            },
            labelLine: {
              show: false
            },
            data: modelos
          }]
        };
        chart.setOption(option);
      } catch (error) {
        console.error('Erro ao carregar gráfico de modelos:', error);
      }
    }

    // Carregar gráfico de filiais
    async function carregarGraficoFiliais() {
      try {
        const response = await fetch('/api/vendas-filial');
        const { filiais, valores } = await response.json();

        const chart = echarts.init(document.getElementById('filialChart'));
        const option = {
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'shadow'
            }
          },
          grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
          },
          xAxis: {
            type: 'category',
            data: filiais,
            axisLabel: {
              interval: 0,
              rotate: 30
            }
          },
          yAxis: {
            type: 'value'
          },
          series: [{
            data: valores,
            type: 'bar',
            showBackground: true,
            backgroundStyle: {
              color: 'rgba(180, 180, 180, 0.2)'
            },
            itemStyle: {
              borderRadius: [5, 5, 0, 0]
            }
          }]
        };
        chart.setOption(option);
      } catch (error) {
        console.error('Erro ao carregar gráfico de filiais:', error);
      }
    }

    // Carregar todos os dados quando a página carregar
    window.addEventListener('load', () => {
      carregarDadosTabela();
      carregarGraficoModelos();
      carregarGraficoFiliais();
    });

    // Ajustar gráficos quando a janela for redimensionada
    window.addEventListener('resize', () => {
      const charts = document.querySelectorAll('[id$="Chart"]');
      charts.forEach(chart => {
        echarts.getInstanceByDom(chart)?.resize();
      });
    });
  </script>
</body>

</html>